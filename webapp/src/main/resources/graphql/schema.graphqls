#
# Yet Another UserAgent Analyzer
# Copyright (C) 2013-2022 Niels Basjes
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
YAUAA: YET ANOTHER USERAGENT ANALYZER

This is a java library that tries to parse and analyze the useragent string (and when available the User-Agent Client Hints) and extract as many relevant attributes as possible.

The full documentation can be found here https://yauaa.basjes.nl

WARNING: This MUST be treated as an INSECURE and UNSTABLE proof of concept.

"""
type Query {
    "Parse and analyze the provided HTTP Request Headers and return the result of this analysis"
    analyze(requestHeaders: RequestHeadersInput, userAgent: String): AnalysisResult
}

"The HTTP Request Headers that are to be analyzed"
input RequestHeadersInput {
    dummy: String # Replaced with the real set of fields and documentation at runtime
}

"The HTTP Request Headers that we used to get to this analysis result"
type RequestHeadersResult{
    dummy: String # Replaced with the real set of fields and documentation at runtime
}

"The analysis results of a User-Agent and other headers."
type AnalysisResult {
    "'true' if there was a parse error in the User-Agent"
    syntaxError:                    String

    "Get the entry for a certain key (fieldName is case sensitive!)"
    field(fieldName: String!):      FieldResult!

    "Get entry/entries for a certain key/s (fieldNames are case sensitive!). Empty/absent list means all fields."
    fields(fieldNames: [String!]): [FieldResult!]

    "The provided input can be requested back (useful in batch analysis scenarios)"
    requestHeaders:                 RequestHeadersResult
}

"A single field and value which was during the analysis"
type FieldResult {
    fieldName: String!
    value: String
}
